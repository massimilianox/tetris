'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if('value'in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}var UpdateBoard=exports.UpdateBoard=function(){var canvas=document.querySelector('canvas');var ctx=canvas.getContext('2d');var txtLines=document.querySelector('#lines');return function(){function _class(dataModel){_classCallCheck(this,_class);this.dm=dataModel;this.board=[];this.initBoard()}_createClass(_class,[{key:'initBoard',value:function initBoard(){canvas.width=this.dm.blocksz*this.dm.canvasColumns;canvas.height=this.dm.blocksz*this.dm.canvasLines;for(var y=0;y<this.dm.canvasLines;y++){this.board[y]=[];for(var x=0;x<this.dm.canvasColumns;x++){this.board[y][x]=this.dm.defBg}}//this.nl = 0;
txtLines.textContent='Lines: 0';this.drawCanvas()}},{key:'drawSquare',value:function drawSquare(x,y,color){ctx.fillStyle=color;ctx.fillRect(x*this.dm.blocksz,y*this.dm.blocksz,this.dm.blocksz,this.dm.blocksz);ctx.strokeStyle='cadetblue';ctx.lineWidth=0.4;ctx.strokeRect(x*this.dm.blocksz,y*this.dm.blocksz,this.dm.blocksz,this.dm.blocksz)}},{key:'drawCanvas',value:function drawCanvas(){for(var y=0;y<this.dm.canvasLines;y++){for(var x=0;x<this.dm.canvasColumns;x++){this.drawSquare(x,y,this.board[y][x])}}}},{key:'drawBoard',value:function drawBoard(dx,dy,color,shape){for(var y=0;y<shape.length;y++){for(var x=0;x<shape[y].length;x++){if(shape[y][x]&&this.board[dy+y]&&this.board[dy+y][dx+x]){this.board[dy+y][dx+x]=color}}}}},{key:'countLines',value:function countLines(){for(var y=this.board.length-1;y>=0;y--){if(!this.board[y].includes(this.dm.defBg)){txtLines.textContent='Lines: '+ ++this.dm.points;for(var l=y;l>=0;l--){for(var x=0;x<this.board[l].length;x++){this.board[l][x]=l===0?this.dm.defBg:this.board[l-1][x]}}this.drawCanvas();if(y>0){this.countLines()}}}}}]);return _class}()}();